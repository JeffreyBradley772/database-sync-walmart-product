generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
  binaryTargets   = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Comment {
  id          String      @id
  content     String
  userId      String
  reviewId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  FlossReview FlossReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  User        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([reviewId])
  @@index([userId])
}

model FlossProduct {
  id                  String                @id
  name                String
  brand               String
  description         String?
  type                String
  price               Decimal?              @db.Decimal(10, 2)
  imageUrl            String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  FlossReview         FlossReview[]
  ProductPurchaseLink ProductPurchaseLink[]
}

model FlossReview {
  id           String       @id
  title        String
  productId    String
  description  String
  rating       Int          @db.SmallInt
  pros         String[]
  cons         String[]
  userId       String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime
  Comment      Comment[]
  FlossProduct FlossProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  User         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([userId])
}

model ProductPurchaseLink {
  id           String       @id
  productId    String
  retailer     String
  url          String
  price        Decimal?     @db.Decimal(10, 2)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime
  FlossProduct FlossProduct @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  isVerified    Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  Account       Account[]
  Comment       Comment[]
  FlossReview   FlossReview[]
  Session       Session[]
}
